#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

struct plane
{
    vec3 N;
    float d;
};

struct light_tile
{
    plane Left;
    plane Right;
    plane Top;
    plane Bottom;
    float MinDepth;
    float MaxDepth;
    // NOTE: The compiler is stupid and doesn't handle array accesses of padded types for some reason
    // Bug report?
    uint Pad[2];
};

// TODO: We can probs get better cache coherence if we only move in local_size_x, right now its 
// scattered a lot for some reason
#define TILE_SIZE 4
layout(local_size_x = 8, local_size_y = 8) in;

layout(push_constant) uniform push_constants
{
    mat4 InverseVP;
    vec2 ScreenDim;
    float NearZ;
    float FarZ;
} Const;

layout(set = 0, binding = 0) buffer light_tile_array
{
    light_tile LightTileArray[];
};

layout(set = 0, binding = 1) uniform sampler2D DepthSampler;

plane CreatePlane(vec3 P1, vec3 P2, vec3 P3)
{
    plane Result;
    Result.N = normalize(cross(P2 - P1, P3 - P1));
    Result.d = dot(Result.N, P1);

    return Result;
}

vec3 ScreenToWorld(mat4 InverseVP, vec3 Pixel)
{
    vec2 NDC = 2.0*(Pixel.xy / Const.ScreenDim) - vec2(1, 1);
    vec4 World = (InverseVP*vec4(NDC, Pixel.z, 1));
    World.xyz / World.w;

    return World.xyz;
}

float DepthToWorldDepth(float Depth)
{
    float Result = (Const.FarZ*Const.NearZ) / (Depth*(Const.NearZ - Const.FarZ) + Const.FarZ);
    return Result;
}

void main()
{
    vec2 TileSize = vec2(TILE_SIZE, TILE_SIZE);

    if (gl_GlobalInvocationID.x < Const.ScreenDim.x*TILE_SIZE &&
        gl_GlobalInvocationID.y < Const.ScreenDim.y*TILE_SIZE)
    {
        light_tile Result;

        // NOTE: Calculate frustum for tile
        vec3 EyeWorldPos = vec3(0, 0, 0);

        vec3 BotLeft = vec3(TileSize*(gl_GlobalInvocationID.xy + vec2(0, 0)), 1.0);
        vec3 BotRight = vec3(TileSize*(gl_GlobalInvocationID.xy + vec2(1, 0)), 1.0);
        vec3 TopLeft = vec3(TileSize*(gl_GlobalInvocationID.xy + vec2(0, 1)), 1.0);
        vec3 TopRight = vec3(TileSize*(gl_GlobalInvocationID.xy + vec2(1, 1)), 1.0);

        BotLeft = ScreenToWorld(Const.InverseVP, BotLeft);
        BotRight = ScreenToWorld(Const.InverseVP, BotRight);
        TopLeft = ScreenToWorld(Const.InverseVP, TopLeft);
        TopRight = ScreenToWorld(Const.InverseVP, TopRight);

        Result.Left = CreatePlane(EyeWorldPos, BotLeft, TopLeft);
        Result.Bottom = CreatePlane(EyeWorldPos, BotRight, BotLeft);
        Result.Right = CreatePlane(EyeWorldPos, TopRight, BotRight);
        Result.Top = CreatePlane(EyeWorldPos, TopLeft, TopRight);

        // NOTE: Calculate min/max depth
        Result.MinDepth = Const.FarZ;
        Result.MaxDepth = Const.NearZ;
        for (uint y = 0; y < TILE_SIZE; y += 1)
        {
            for (uint x = 0; x < TILE_SIZE; x += 1)
            {
                // NOTE: Write depth in world space
                vec2 TexCoord = (TileSize*gl_GlobalInvocationID.xy + vec2(x, y)) / Const.ScreenDim;
                float DepthValue = DepthToWorldDepth(texture(DepthSampler, TexCoord).r);
                Result.MinDepth = min(Result.MinDepth, DepthValue);
                Result.MaxDepth = max(Result.MaxDepth, DepthValue);
            }
        }

        uint Stride = gl_NumWorkGroups.x*gl_WorkGroupSize.x;
        LightTileArray[gl_GlobalInvocationID.y*Stride + gl_GlobalInvocationID.x] = Result;
    }
}